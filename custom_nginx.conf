server
{
    listen 80;
    listen 443 ssl;
    listen 443 quic;
    http2 on;
    server_name students.hoshinoai.xin;
    index index.php index.html index.htm default.php default.htm default.html;
    root /www/wwwroot/students.hoshinoai.xin;
    
    #CERT-APPLY-CHECK--START
    # 用于SSL证书申请时的文件验证相关配置 -- 请勿删除
    include /www/server/panel/vhost/nginx/well-known/students.hoshinoai.xin.conf;
    #CERT-APPLY-CHECK--END

    #SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则
    #error_page 404/404.html;
    #HTTP_TO_HTTPS_START
    if ($server_port !~ 443){
        rewrite ^(/.*)$ https://$host$1 permanent;
    }
    #HTTP_TO_HTTPS_END
    ssl_certificate    /www/server/panel/vhost/cert/students.hoshinoai.xin/fullchain.pem;
    ssl_certificate_key    /www/server/panel/vhost/cert/students.hoshinoai.xin/privkey.pem;
    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    add_header Strict-Transport-Security "max-age=31536000";
    add_header Alt-Svc 'quic=":443"; h3=":443"; h3-29=":443"; h3-27=":443";h3-25=":443"; h3-T050=":443"; h3-Q050=":443";h3-Q049=":443";h3-Q048=":443"; h3-Q046=":443"; h3-Q043=":443"';
    error_page 497  https://$host$request_uri;
    #SSL-END

    # 添加安全headers
    add_header X-Content-Type-Options "nosniff";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Frame-Options "SAMEORIGIN";

    #PHP-INFO-START  PHP引用配置，可以注释或修改
    include enable-php-80.conf;
    #PHP-INFO-END

    # 添加特殊规则，将assets/uploads路径重定向到uploads目录
    # 解决文件访问404问题
    location ^~ /assets/uploads/ {
        alias /www/wwwroot/students.hoshinoai.xin/uploads/;
        try_files $uri $uri/ =404;
    }

    #禁止访问的文件或目录
    location ~ ^/(\.user.ini|\.htaccess|\.git|\.env|\.svn|\.project|LICENSE|README.md|config\.php)
    {
        return 404;
    }

    #一键申请SSL证书验证目录相关设置
    location ~ \.well-known{
        allow all;
    }

    #禁止在证书验证目录放入敏感文件
    if ( $uri ~ "^/\.well-known/.*\.(php|jsp|py|js|css|lua|ts|go|zip|tar\.gz|rar|7z|sql|bak)$" ) {
        return 403;
    }

    # 处理静态文件
    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
    {
        expires      30d;
        error_log /dev/null;
        access_log /dev/null;
        
        # 如果静态文件不存在，则传递给PHP处理
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ .*\.(js|css)?$
    {
        expires      12h;
        error_log /dev/null;
        access_log /dev/null;
        
        # 如果静态文件不存在，则传递给PHP处理
        try_files $uri $uri/ /index.php?$query_string;
    }

    # 通用规则，如果文件不存在则传递给index.php
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }
    
    # 不再需要显式的404处理，所有404都会通过PHP路由系统处理
    # 因为我们已经在routes.php中添加了notFound处理函数
    
    access_log  /www/wwwlogs/students.hoshinoai.xin.log;
    error_log  /www/wwwlogs/students.hoshinoai.xin.error.log;
} 